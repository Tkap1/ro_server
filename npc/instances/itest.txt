
prontera,169,199,3	script	itest	PORTAL,{
	
	callsub(on_talk);
	end;
	
	OnInit:
		.orc_zombie_id = 3383;
		.orc_skeleton_id = 3384;
		.drainliar_id = 3385;
		.instance_names$[0] = "1@orcsdun01";
		.EASY = 1;
		.MEDIUM = 2;
		.HARD = 3;
		
		.ORC_INSTANCE = 1;
		.FACEWORM_INSTANCE = 2;
		
		setarray(.base_map_names$[0],
		"orcsdun01",
		"iz_dun00"
		);
		
		setarray(.instance_display_names$[0],
		"Orc Instance",
		"Faceworm Instance"
		);
		
		setarray(.instance_names$[0],
		"1@orcsdun01",
		"1@iz_dun00"
		);
		
		setarray(.orc_reward_ids[0],
		Temporal_Crystal,
		Coagulated_Spell
		);
		
		setarray(.orc_reward_min[0],
		,
		1,	// Temporal_Crystal,
		3	// Coagulated_Spell
		);
		
		setarray(.orc_reward_max[0],
		2,	// Temporal_Crystal,
		6	// Coagulated_Spell
		);
		
		.id_faceworm = 2528;
		.id_faceworm_queen = 2529;
		.id_dark_faceworm = 2530;
		.id_faceworm_queen_red = 2532;
		.id_faceworm_queen_green = 2533;
		.id_faceworm_queen_blue = 2534;
		.id_faceworm_queen_yellow = 2535;
		.id_faceworm_egg = 2540;
		.id_faceworm_larva = 2541;
		
		setarray(.faceworm_possible_mvps[0],
		.id_faceworm_queen,
		.id_faceworm_queen_red,
		.id_faceworm_queen_green,
		.id_faceworm_queen_blue,
		.id_faceworm_queen_yellow
		);
		
		.instance_selection$ = "Orc Instance:Faceworm Instance:Cancel";
		
	end;
	
	on_talk:
	
		mes("What instance are you looking for?");
		.@instance_choice = select(.instance_selection$);
		mesclear();
		
		if(.@instance_choice == 3)
		{
			end;
		}
	
		.@party_id = getcharid(CHAR_ID_PARTY);
		
		if(.@instance_choice == .ORC_INSTANCE)
		{
			
			if (getcharid(CHAR_ID_CHAR) == getpartyleader(.@party_id, 2))
			{
				switch (select("Generate Instance", "Enter Instance", "Cancel"))
				{
				case 1:
				
					.@difficulty_choice = select("Easy:Medium:Hard:Cancel");
					if(.@difficulty_choice == 4) { close; }
				
					.@temp_display_name$ = .instance_display_names$[.@instance_choice - 1];
					if(.@difficulty_choice == .EASY) { .@temp_display_name$ += " - Easy";}
					if(.@difficulty_choice == .MEDIUM) { .@temp_display_name$ += " - Medium";}
					if(.@difficulty_choice == .HARD) { .@temp_display_name$ += " - Hard";}
					
					.@instance = instance_create(.@temp_display_name$, .@party_id);
					if( .@instance < 0 )
					{
						mes "Failed to create the instance!";
						close;
					}
					if( instance_attachmap(.base_map_names$[.@instance_choice - 1], .@instance, false, .instance_names$[.@instance_choice - 1]) == "" )
					// if( instance_attachmap(.instance_names$[.@instance_choice - 1], .@instance) == "" )
					{
						instance_destroy(.@instance);
						mes "Failed to attach payon as a map!";
						close;
					}
					// instance_attach(.@instance);
					instance_set_timeout(3600, 300, .@instance);
					instance_init(.@instance);
					
					.orc_difficulty = .@difficulty_choice;
					
					disablenpc instance_npcname("orc01-1", .@instance);
					disablenpc instance_npcname("orc03", .@instance);
					
					.orc_total_mobs = 1100;
					.orc_mvps_killed = 0;
					.orc_spawned_mvps = false;
					
					monster(.instance_names$[.@instance_choice - 1], 0, 0, getmonsterinfo(.orc_zombie_id, MOB_NAME), .orc_zombie_id, 700, "itest::On_itest_kill");
					monster(.instance_names$[.@instance_choice - 1], 0, 0, getmonsterinfo(.orc_skeleton_id, MOB_NAME), .orc_skeleton_id, 300, "itest::On_itest_kill");
					monster(.instance_names$[.@instance_choice - 1], 0, 0, getmonsterinfo(.drainliar_id, MOB_NAME), .drainliar_id, 100, "itest::On_itest_kill");
					
					if(.orc_difficulty == .EASY)
					{
						.orc_mvps_to_spawn = 3;
						.orc_reward_multiplier = 1;
					}
					
					if(.orc_difficulty == .MEDIUM)
					{
						.orc_mvps_to_spawn = 4;
						.orc_reward_multiplier = 2;
						freeloop(true);
						.@count = getunits(BL_MOB, .@units, false, .instance_names$[.@instance_choice - 1]);
						for(.@i = 0; .@i < .@count; .@i++)
						{
							.@maxhp_before = getunitdata(.@units[.@i], UDT_MAXHP);
							setunitdata(.@units[.@i], UDT_MAXHP, .@maxhp_before * 2);
							setunitdata(.@units[.@i], UDT_HP, .@maxhp_before * 2);
							
							.@atkmin_before = getunitdata(.@units[.@i], UDT_ATKMIN);
							setunitdata(.@units[.@i], UDT_ATKMIN, .@atkmin_before * 150 / 100);
							
							.@atkmax_before = getunitdata(.@units[.@i], UDT_ATKMAX);
							setunitdata(.@units[.@i], UDT_ATKMAX, .@atkmax_before * 150 / 100);
							
							.@movespeed_before = getunitdata(.@units[.@i], UDT_SPEED);
							setunitdata(.@units[.@i], UDT_SPEED, .@movespeed_before * 83 / 100);
							
							setunitdata(.@units[.@i], UDT_BASE_EXP, 160);
							setunitdata(.@units[.@i], UDT_JOB_EXP, 160);
						}
						freeloop(false);
					}
					
					if(.orc_difficulty == .HARD)
					{
						.orc_mvps_to_spawn = 5;
						.orc_reward_multiplier = 3;
						freeloop(true);
						.@count = getunits(BL_MOB, .@units, false, .instance_names$[.@instance_choice - 1]);
						for(.@i = 0; .@i < .@count; .@i++)
						{
							.@maxhp_before = getunitdata(.@units[.@i], UDT_MAXHP);
							setunitdata(.@units[.@i], UDT_MAXHP, .@maxhp_before * 3);
							setunitdata(.@units[.@i], UDT_HP, .@maxhp_before * 3);
							
							.@atkmin_before = getunitdata(.@units[.@i], UDT_ATKMIN);
							setunitdata(.@units[.@i], UDT_ATKMIN, .@atkmin_before * 2);
							
							.@atkmax_before = getunitdata(.@units[.@i], UDT_ATKMAX);
							setunitdata(.@units[.@i], UDT_ATKMAX, .@atkmax_before * 2);
							
							.@movespeed_before = getunitdata(.@units[.@i], UDT_SPEED);
							setunitdata(.@units[.@i], UDT_SPEED, .@movespeed_before * 66 / 100);
							
							setunitdata(.@units[.@i], UDT_BASE_EXP, 190);
							setunitdata(.@units[.@i], UDT_JOB_EXP, 190);
						}
						freeloop(false);
					}
					
					// Get the party members
					getpartymember(getcharid(CHAR_ID_PARTY), 0);
					copyarray(@names$[0], $@partymembername$[0], $@partymembercount);
					
					getpartymember(getcharid(CHAR_ID_PARTY), 1);
					copyarray(@char_ids[0], $@partymembercid[0], $@partymembercount);
					getpartymember(getcharid(CHAR_ID_PARTY), 2);
					copyarray(@account_ids[0], $@partymemberaid[0], $@partymembercount);
					
					@party_member_count = $@partymembercount;
					
					for(.@i = 0; .@i < @party_member_count; .@i++)
					{
						if(isloggedin(@account_ids[.@i], @char_ids[.@i]))
						{
							set(getvariableofpc(player_died, @account_ids[.@i]), false);
						}
					}
					mes("The instance has been created!");
					close();
					
				case 2:
					break; // Fall through to access the dungeon (after the else)
				case 3:
					close();
				}
			}
			else if (select("Enter Instance:Cancel") == 2)
			{
				end;
			}

			if (has_instance(.base_map_names$[.@instance_choice - 1]) == "")
			{
				mesf("Instance does not exist.");
				mes("The party leader has not reserved entrance to the dungeon yet.");
				next();
				mes("Once the reservation is complete, the dungeon will be generated.");
				mes("If your dungeon has been destroyed you must wait 7 days before re-entering.");
				close();
			}

			warp .instance_names$[.@instance_choice - 1], 32, 169;
		}
		
		if(.@instance_choice == .FACEWORM_INSTANCE)
		{
			
			if (getcharid(CHAR_ID_CHAR) == getpartyleader(.@party_id, 2))
			{
				switch (select("Generate Instance", "Enter Instance", "Cancel"))
				{
				case 1:
				
					.@difficulty_choice = select("Easy:Medium:Hard:Cancel");
					if(.@difficulty_choice == 4) { close; }
				
					.@temp_display_name$ = .instance_display_names$[.@instance_choice - 1];
					if(.@difficulty_choice == .EASY) { .@temp_display_name$ += " - Easy";}
					if(.@difficulty_choice == .MEDIUM) { .@temp_display_name$ += " - Medium";}
					if(.@difficulty_choice == .HARD) { .@temp_display_name$ += " - Hard";}
					
					.@instance = instance_create(.@temp_display_name$, .@party_id);
					if( .@instance < 0 )
					{
						mes "Failed to create the instance!";
						close;
					}
					if( instance_attachmap(.base_map_names$[.@instance_choice - 1], .@instance, false, .instance_names$[.@instance_choice - 1]) == "" )
					// if( instance_attachmap(.instance_names$[.@instance_choice - 1], .@instance) == "" )
					{
						instance_destroy(.@instance);
						mes "Failed to attach payon as a map!";
						close;
					}
					// instance_attach(.@instance);
					instance_set_timeout(3600, 300, .@instance);
					instance_init(.@instance);
					
					.faceworm_difficulty = .@difficulty_choice;
					
					disablenpc instance_npcname("izd03", .@instance);
					disablenpc instance_npcname("izd01-1", .@instance);
					disablenpc instance_npcname("izd02", .@instance);
					
					.faceworm_dark_start = 25;
					.faceworm_dark_killed = 0;
					.faceworm_mvps_killed = 0;
					.faceworm_spawned_mvps = false;
					
					monster(.instance_names$[.@instance_choice - 1], 0, 0, getmonsterinfo(.id_faceworm, MOB_NAME), .id_faceworm, 500);
					monster(.instance_names$[.@instance_choice - 1], 0, 0, getmonsterinfo(.id_dark_faceworm, MOB_NAME), .id_dark_faceworm, .faceworm_dark_start * 3, "itest::On_dark_faceworm_kill");
					monster(.instance_names$[.@instance_choice - 1], 0, 0, getmonsterinfo(.id_faceworm_egg, MOB_NAME), .id_faceworm_egg, 225);
					monster(.instance_names$[.@instance_choice - 1], 0, 0, getmonsterinfo(.id_faceworm_larva, MOB_NAME), .id_faceworm_larva, 225);
					
					if(.faceworm_difficulty == .EASY)
					{
						.faceworm_mvps_to_spawn = 1;
						.faceworm_reward_min = 30;
						.faceworm_reward_max = 60;
					}
					
					if(.faceworm_difficulty == .MEDIUM)
					{
						.faceworm_mvps_to_spawn = 2;
						.faceworm_reward_min = 60;
						.faceworm_reward_max = 120;
						freeloop(true);
						.@count = getunits(BL_MOB, .@units, false, .instance_names$[.@instance_choice - 1]);
						for(.@i = 0; .@i < .@count; .@i++)
						{
							.@maxhp_before = getunitdata(.@units[.@i], UDT_MAXHP);
							setunitdata(.@units[.@i], UDT_MAXHP, .@maxhp_before * 2);
							setunitdata(.@units[.@i], UDT_HP, .@maxhp_before * 2);
							
							.@atkmin_before = getunitdata(.@units[.@i], UDT_ATKMIN);
							setunitdata(.@units[.@i], UDT_ATKMIN, .@atkmin_before * 150 / 100);
							
							.@atkmax_before = getunitdata(.@units[.@i], UDT_ATKMAX);
							setunitdata(.@units[.@i], UDT_ATKMAX, .@atkmax_before * 150 / 100);
							
							.@movespeed_before = getunitdata(.@units[.@i], UDT_SPEED);
							setunitdata(.@units[.@i], UDT_SPEED, .@movespeed_before * 83 / 100);
							
							setunitdata(.@units[.@i], UDT_BASE_EXP, 160);
							setunitdata(.@units[.@i], UDT_JOB_EXP, 160);
						}
						freeloop(false);
					}
					
					if(.faceworm_difficulty == .HARD)
					{
						.faceworm_mvps_to_spawn = 3;
						.faceworm_reward_min = 120;
						.faceworm_reward_max = 240;
						freeloop(true);
						.@count = getunits(BL_MOB, .@units, false, .instance_names$[.@instance_choice - 1]);
						for(.@i = 0; .@i < .@count; .@i++)
						{
							.@maxhp_before = getunitdata(.@units[.@i], UDT_MAXHP);
							setunitdata(.@units[.@i], UDT_MAXHP, .@maxhp_before * 3);
							setunitdata(.@units[.@i], UDT_HP, .@maxhp_before * 3);
							
							.@atkmin_before = getunitdata(.@units[.@i], UDT_ATKMIN);
							setunitdata(.@units[.@i], UDT_ATKMIN, .@atkmin_before * 2);
							
							.@atkmax_before = getunitdata(.@units[.@i], UDT_ATKMAX);
							setunitdata(.@units[.@i], UDT_ATKMAX, .@atkmax_before * 2);
							
							.@movespeed_before = getunitdata(.@units[.@i], UDT_SPEED);
							setunitdata(.@units[.@i], UDT_SPEED, .@movespeed_before * 66 / 100);
							
							setunitdata(.@units[.@i], UDT_BASE_EXP, 190);
							setunitdata(.@units[.@i], UDT_JOB_EXP, 190);
						}
						freeloop(false);
					}
					
					// Get the party members
					getpartymember(getcharid(CHAR_ID_PARTY), 0);
					copyarray(@names$[0], $@partymembername$[0], $@partymembercount);
					
					getpartymember(getcharid(CHAR_ID_PARTY), 1);
					copyarray(@char_ids[0], $@partymembercid[0], $@partymembercount);
					getpartymember(getcharid(CHAR_ID_PARTY), 2);
					copyarray(@account_ids[0], $@partymemberaid[0], $@partymembercount);
					
					@party_member_count = $@partymembercount;
					
					for(.@i = 0; .@i < @party_member_count; .@i++)
					{
						if(isloggedin(@account_ids[.@i], @char_ids[.@i]))
						{
							set(getvariableofpc(player_died, @account_ids[.@i]), false);
						}
					}
					mes("The instance has been created!");
					close();
					
				case 2:
					break; // Fall through to access the dungeon (after the else)
				case 3:
					close();
				}
			}
			else if (select("Enter Instance:Cancel") == 2)
			{
				end;
			}

			if (has_instance(.base_map_names$[.@instance_choice - 1]) == "")
			{
				mesf("Instance does not exist.");
				mes("The party leader has not reserved entrance to the dungeon yet.");
				next();
				mes("Once the reservation is complete, the dungeon will be generated.");
				mes("If your dungeon has been destroyed you must wait 7 days before re-entering.");
				close();
			}

			warp .instance_names$[.@instance_choice - 1], 39, 59;
		}
		
	end;
	
	
	// =============== EVENTS ==================
	On_itest_kill:
	
		.orc_total_mobs -= 1;
		if(!.orc_spawned_mvps)
		{
			if(.orc_total_mobs < 201 && .orc_total_mobs > 0)
			{
				.@mobs_left_until_mvp_spawn = .orc_total_mobs - 50;
				announce(sprintf("%d %s remanining until the MVPs spawn", .@mobs_left_until_mvp_spawn, (.@mobs_left_until_mvp_spawn == 1 ? "monster" : "monsters")), bc_blue|bc_map);
			}
			if(.orc_total_mobs < 51)
			{
				.orc_spawned_mvps = true;
				announce(sprintf("%d MVPs have been spawned!", .orc_mvps_to_spawn), bc_blue|bc_map);
				for(.@i = 0; .@i < .orc_mvps_to_spawn; .@i++)
				{
					monster("this",0, 0,"--ja--",-3,1, "itest::On_MVP_killed");
				}
			}
		}
		
	end;
	
	On_MVP_killed:
		.orc_mvps_killed += 1;
		if(.orc_mvps_killed == .orc_mvps_to_spawn)
		{
			announce("All MVPs have been killed!", bc_blue|bc_map);
			getpartymember(getcharid(CHAR_ID_PARTY), 0);
			copyarray(@names$[0], $@partymembername$[0], $@partymembercount);
			
			if($@partymembercount == 0)
			{
				@is_on_party = false;
			}
			
			else
			{
				@is_on_party = true;
				getpartymember(getcharid(CHAR_ID_PARTY), 1);
				copyarray(@char_ids[0], $@partymembercid[0], $@partymembercount);
				getpartymember(getcharid(CHAR_ID_PARTY), 2);
				copyarray(@account_ids[0], $@partymemberaid[0], $@partymembercount);
				
				@party_member_count = $@partymembercount;
				@killer_map$ = strcharinfo(PC_MAP);
			}
			
			
			if(@is_on_party)
			{
				for(.@i = 0; .@i < @party_member_count; .@i++)
				{
					if(isloggedin(@account_ids[.@i], @char_ids[.@i]))
					{
						@party_member_map$ = strcharinfo(PC_MAP, "a", @account_ids[.@i]);
						if(@killer_map$ == @party_member_map$)
						{
							.@died = getvariableofpc(player_died, @account_ids[.@i]);
							
							for(.@j = 0; .@j < getarraysize(.orc_reward_ids); .@j++)
							{
								@temp_reward_id = .orc_reward_ids[.@j];
								@temp_reward_min = .orc_reward_min[.@j];
								@temp_reward_max = .orc_reward_max[.@j];
								if(.@died)
								{
									@temp_reward_min /= 2;
									@temp_reward_max /= 2;
								}
								@roll_amount = rand(@temp_reward_min, @temp_reward_max);
								if(@roll_amount > 0) { getitem(@temp_reward_id, @roll_amount, @account_ids[.@i]); }
							}
							
							// if(.@died) { .@amount = rand(.crystals_min / 2, .crystals_max / 2); }
							// else { .@amount = rand(.crystals_min, .crystals_max); }
							// if(.@amount > 0) { getitem(Temporal_Crystal, .@amount, @account_ids[.@i]); }
						}
					}
				}
			}
			else
			{
				for(.@j = 0; .@j < getarraysize(.orc_reward_ids); .@j++)
				{
					@temp_reward_id = .orc_reward_ids[.@j];
					@temp_reward_min = .orc_reward_min[.@j];
					@temp_reward_max = .orc_reward_max[.@j];
					if(.player_died)
					{
						@temp_reward_min /= 2;
						@temp_reward_max /= 2;
					}
					@roll_amount = rand(@temp_reward_min, @temp_reward_max);
					if(@roll_amount > 0) { getitem(@temp_reward_id, @roll_amount, @account_ids[.@i]); }
				}
				// if(player_died) { .@amount = rand(.crystals_min / 2, .crystals_max / 2); }
				// else { .@amount = rand(.crystals_min, .crystals_max); }
				// if(.@amount > 0) { getitem(Temporal_Crystal, .@amount, @account_ids[.@i]); }
			}
		}
	end;
	
	
	On_dark_faceworm_kill:
	
		.faceworm_dark_killed += 1;
		if(!.faceworm_spawned_mvps)
		{
			.@mobs_left_until_mvp_spawn = .faceworm_dark_start - .faceworm_dark_killed;
			announce(sprintf("%d %s remanining until the %s", .@mobs_left_until_mvp_spawn, (.@mobs_left_until_mvp_spawn == 1 ? "Dark Faceworm" : "Dark Faceworms"), (.faceworm_difficulty == .EASY ? "MVP spawns" : "MVPs spawn")), bc_blue|bc_map);
			if(.@mobs_left_until_mvp_spawn == 0)
			{
				.faceworm_spawned_mvps = true;
				announce(sprintf("%s", (.orc_mvps_to_spawn > 1 ? "The MVPs have been spawned!" : "The MVP has spawned!")), bc_blue|bc_map);
				for(.@i = 0; .@i < .faceworm_mvps_to_spawn; .@i++)
				{
					areamonster("this",237-10, 164+10,237+10,164-10,"--ja--",.faceworm_possible_mvps[rand(0, getarraysize(.faceworm_possible_mvps) - 1)], 1, "itest::On_faceworm_mvp_killed");
				}
			}
		}
		
	end;
	
	On_faceworm_mvp_killed:
		.faceworm_mvps_killed += 1;
		if(.faceworm_mvps_killed == .faceworm_mvps_to_spawn)
		{
			announce("All MVPs have been killed!", bc_blue|bc_map);
			getpartymember(getcharid(CHAR_ID_PARTY), 0);
			copyarray(@names$[0], $@partymembername$[0], $@partymembercount);
			
			if($@partymembercount == 0)
			{
				@is_on_party = false;
			}
			
			else
			{
				@is_on_party = true;
				getpartymember(getcharid(CHAR_ID_PARTY), 1);
				copyarray(@char_ids[0], $@partymembercid[0], $@partymembercount);
				getpartymember(getcharid(CHAR_ID_PARTY), 2);
				copyarray(@account_ids[0], $@partymemberaid[0], $@partymembercount);
				
				@party_member_count = $@partymembercount;
				@killer_map$ = strcharinfo(PC_MAP);
			}
			
			
			if(@is_on_party)
			{
				for(.@i = 0; .@i < @party_member_count; .@i++)
				{
					if(isloggedin(@account_ids[.@i], @char_ids[.@i]))
					{
						@party_member_map$ = strcharinfo(PC_MAP, "a", @account_ids[.@i]);
						if(@killer_map$ == @party_member_map$)
						{
							.@died = getvariableofpc(player_died, @account_ids[.@i]);
							if(.@died) { .@amount = rand(.faceworm_reward_min / 2, .faceworm_reward_max / 2); }
							else { .@amount = rand(.faceworm_reward_min, .faceworm_reward_max); }
							if(.@amount > 0) { getitem(Treasure_Box, .@amount, @account_ids[.@i]); }
						}
					}
				}
			}
			else
			{
				if(player_died) { .@amount = rand(.faceworm_reward_min / 2, .faceworm_reward_max / 2); }
				else { .@amount = rand(.faceworm_reward_min, .faceworm_reward_max); }
				if(.@amount > 0) { getitem(Treasure_Box, .@amount, @account_ids[.@i]); }
			}
		}
}
