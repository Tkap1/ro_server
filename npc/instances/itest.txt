
prontera,169,199,3	script	itest	PORTAL,{
	
	callsub(on_talk);
	end;
	
	OnInit:
		.orc_zombie_id = 3383;
		.orc_skeleton_id = 3384;
		.drainliar_id = 3385;
		.map_name$ = "orcsdun01";
		.instance_name$ = "1@orcsdun01";
		.EASY = 1;
		.MEDIUM = 2;
		.HARD = 3;
	end;
	
	on_talk:
		.@party_id = getcharid(CHAR_ID_PARTY);
		.@p_name$ = getpartyname(.@party_id);


		.@orctime = questprogress(12317, PLAYTIME);
		if (.@orctime == 2) {
			erasequest(12317);
		}

		if (.@orctime == 1) {
			mes("You can enter the instance if it has been generated.");
			next();
			if (select("Enter the instance", "Cancel") == 2)
				close();
			// Fall through to access the dungeon
		} else { // !.@orctime
			if (getcharid(CHAR_ID_CHAR) == getpartyleader(.@party_id, 2))
			{
				switch (select("Generate Instance", "Enter Instance", "Cancel"))
				{
				case 1:
				
					.@difficulty_choice = select("Easy:Medium:Hard:Cancel");
					if(.@difficulty_choice == 4) { close; }
				
					.@instance = instance_create("Orc Dungeon Hard", .@party_id);
					if( .@instance < 0 )
					{
						mes "Failed to create the instance!";
						close;
					}
					if( instance_attachmap(.map_name$, .@instance, false, .instance_name$) == "" )
					// if( instance_attachmap(.instance_name$, .@instance) == "" )
					{
						instance_destroy(.@instance);
						mes "Failed to attach payon as a map!";
						close;
					}
					// instance_attach(.@instance);
					instance_set_timeout(3600, 300, .@instance);
					instance_init(.@instance);
					
					.difficulty = .@difficulty_choice;
					
					disablenpc instance_npcname("orc01-1", .@instance);
					disablenpc instance_npcname("orc03", .@instance);
					
					.total_mobs = 1100;
					.mvps_killed = 0;
					.spawned_mvps = false;
					
					monster(.instance_name$, 0, 0, getmonsterinfo(.orc_zombie_id, MOB_NAME), .orc_zombie_id, 700, "itest::On_itest_kill");
					monster(.instance_name$, 0, 0, getmonsterinfo(.orc_skeleton_id, MOB_NAME), .orc_skeleton_id, 300, "itest::On_itest_kill");
					monster(.instance_name$, 0, 0, getmonsterinfo(.drainliar_id, MOB_NAME), .drainliar_id, 100, "itest::On_itest_kill");
					
					if(.difficulty == .EASY)
					{
						.mvps_to_spawn = 3;
						.crystals_min = 1;
						.crystals_max = 3;
					}
					
					if(.difficulty == .MEDIUM)
					{
						.mvps_to_spawn = 4;
						.crystals_min = 2;
						.crystals_max = 4;
						freeloop(true);
						.@count = getunits(BL_MOB, .@units, false, .instance_name$);
						for(.@i = 0; .@i < .@count; .@i++)
						{
							.@maxhp_before = getunitdata(.@units[.@i], UDT_MAXHP);
							setunitdata(.@units[.@i], UDT_MAXHP, .@maxhp_before * 2);
							setunitdata(.@units[.@i], UDT_HP, .@maxhp_before * 2);
							
							.@atkmin_before = getunitdata(.@units[.@i], UDT_ATKMIN);
							setunitdata(.@units[.@i], UDT_ATKMIN, .@atkmin_before * 2);
							
							.@atkmax_before = getunitdata(.@units[.@i], UDT_ATKMAX);
							setunitdata(.@units[.@i], UDT_ATKMAX, .@atkmax_before * 2);
							
							.@movespeed_before = getunitdata(.@units[.@i], UDT_SPEED);
							setunitdata(.@units[.@i], UDT_SPEED, .@movespeed_before * 83 / 100);
						}
						freeloop(false);
					}
					
					if(.difficulty == .HARD)
					{
						.mvps_to_spawn = 5;
						.crystals_min = 3;
						.crystals_max = 5;
						freeloop(true);
						.@count = getunits(BL_MOB, .@units, false, .instance_name$);
						for(.@i = 0; .@i < .@count; .@i++)
						{
							.@maxhp_before = getunitdata(.@units[.@i], UDT_MAXHP);
							setunitdata(.@units[.@i], UDT_MAXHP, .@maxhp_before * 3);
							setunitdata(.@units[.@i], UDT_HP, .@maxhp_before * 3);
							
							.@atkmin_before = getunitdata(.@units[.@i], UDT_ATKMIN);
							setunitdata(.@units[.@i], UDT_ATKMIN, .@atkmin_before * 3);
							
							.@atkmax_before = getunitdata(.@units[.@i], UDT_ATKMAX);
							setunitdata(.@units[.@i], UDT_ATKMAX, .@atkmax_before * 3);
							
							.@movespeed_before = getunitdata(.@units[.@i], UDT_SPEED);
							setunitdata(.@units[.@i], UDT_SPEED, .@movespeed_before * 66 / 100);
						}
						freeloop(false);
					}
					
					// Get the party members
					getpartymember(getcharid(CHAR_ID_PARTY), 0);
					copyarray(@names$[0], $@partymembername$[0], $@partymembercount);
					
					getpartymember(getcharid(CHAR_ID_PARTY), 1);
					copyarray(@char_ids[0], $@partymembercid[0], $@partymembercount);
					getpartymember(getcharid(CHAR_ID_PARTY), 2);
					copyarray(@account_ids[0], $@partymemberaid[0], $@partymembercount);
					
					@party_member_count = $@partymembercount;
					
					for(.@i = 0; .@i < @party_member_count; .@i++)
					{
						if(isloggedin(@account_ids[.@i], @char_ids[.@i]))
						{
							set(getvariableofpc(player_died, @account_ids[.@i]), false);
						}
					}
					
					close();
				case 2:
					break; // Fall through to access the dungeon (after the else)
				case 3:
					close();
				}
			}
			else if (select("Enter Instance:Cancel") == 2)
			{
				end;
			}
			// Else access the dungeon
		}

		// Instance access

		if (has_instance(.map_name$) == "")
		{
			mesf("Instance does not exist.");
			mes("The party leader has not reserved entrance to the dungeon yet.");
			next();
			mes("Once the reservation is complete, the dungeon will be generated.");
			mes("If your dungeon has been destroyed you must wait 7 days before re-entering.");
			close();
		}

		if (!questprogress(12317))
			setquest(12317);
			
		warp .instance_name$, 32, 169;
		
	end;
	
	On_itest_kill:
	
		.total_mobs -= 1;
		if(!.spawned_mvps)
		{
			if(.total_mobs < 201 && .total_mobs > 0)
			{
				.@mobs_left_until_mvp_spawn = .total_mobs - 50;
				announce(sprintf("%d %s remanining until the MVPs spawn", .@mobs_left_until_mvp_spawn, (.@mobs_left_until_mvp_spawn == 1 ? "monster" : "monsters")), bc_blue|bc_map);
			}
			if(.total_mobs < 51)
			{
				.spawned_mvps = true;
				announce(sprintf("%d MVPs have been spawned!", .mvps_to_spawn), bc_blue|bc_map);
				for(.@i = 0; .@i < .mvps_to_spawn; .@i++)
				{
					monster("this",0, 0,"--ja--",-3,1, "itest::On_MVP_killed");
				}
			}
		}
		
	end;
	
	On_MVP_killed:
		.mvps_killed += 1;
		if(.mvps_killed == .mvps_to_spawn)
		{
			announce("All MVPs have been killed!", bc_blue|bc_map);
			getpartymember(getcharid(CHAR_ID_PARTY), 0);
			copyarray(@names$[0], $@partymembername$[0], $@partymembercount);
			
			if($@partymembercount == 0)
			{
				@is_on_party = false;
			}
			
			else
			{
				@is_on_party = true;
				getpartymember(getcharid(CHAR_ID_PARTY), 1);
				copyarray(@char_ids[0], $@partymembercid[0], $@partymembercount);
				getpartymember(getcharid(CHAR_ID_PARTY), 2);
				copyarray(@account_ids[0], $@partymemberaid[0], $@partymembercount);
				
				@party_member_count = $@partymembercount;
				@killer_map$ = strcharinfo(PC_MAP);
			}
			
			
			if(@is_on_party)
			{
				for(.@i = 0; .@i < @party_member_count; .@i++)
				{
					if(isloggedin(@account_ids[.@i], @char_ids[.@i]))
					{
						@party_member_map$ = strcharinfo(PC_MAP, "a", @account_ids[.@i]);
						if(@killer_map$ == @party_member_map$)
						{
							.@died = getvariableofpc(player_died, @account_ids[.@i]);
							if(!.@died)
							{
								getitem(Temporal_Crystal, rand(.crystals_min, .crystals_max), @account_ids[.@i]);
							}
						}
					}
				}
			}
			else if(!player_died)
			{
				getitem(Temporal_Crystal, rand(.crystals_min, .crystals_max), @account_ids[.@i]);
			}
		}
	
}
	
	// Al hablar, menu
	// si eres party leader, menu es entrar - generar - salir
	// si le das a entrar, y no esta generada, puta.
	// si le generar, genera
	
	// .@range = 10;
	// .map_name$ = getmapinfo(MAPINFO_NAME);
	// getmapxy(.map_name$, .@player_x, .@player_y, UNITTYPE_PC);
	// areamonster("this", (.@player_x - .@range), (.@player_y + .@range), (.@player_x + .@range), (.@player_y - .@range), getmonsterinfo(.@mob_id, MOB_NAME), .@mob_id, 1);
// 	if(.instance_created)
// 	{
// 		.@choice = select("Join Instance:Destroy Instance:Cancel");
// 		if(.@choice == 1)
// 		{
// 			player_died = false;
// 			warp .instance_name$, 32, 169;
// 		}
// 		if(.@choice == 2)
// 		{
// 			.instance_created = false;
// 			close();
// 		}
// 		if(.@choice == 3)
// 		{
// 			close();
// 		}
// 	}
// 	else
// 	{
// 		.@choice = select("Generate Instance:Cancel");
// 		if(.@choice == 1)
// 		{
// 			.mvps_killed = 0;
// 			.total_mobs = 1100;
// 			.spawned_mvps = false;
// 			set .@instance, instance_create("Payon instanced", getcharid(1));
// 			if( .@instance < 0 )
// 			{
// 				mes "Failed to create the instance!";
// 				close;
// 			}
// 			if( instance_attachmap(.map_name$, .@instance, false, .instance_name$) == "" )
// 			// *instance_attachmap("<map name>", <instance id>{, <use base name>{, "<new map name>"}})
// 			{
// 				instance_destroy(.@instance);
// 				mes "Failed to attach payon as a map!";
// 				close;
// 			}
// 			instance_attach(.@instance);
// 			instance_set_timeout(3600, 300, .@instance);
// 			instance_init(.@instance);
// 			.instance_created = true;

// 			// warp .instance_name$, 32, 169;
// 			// warpparty(.instance_name$, 32, 169, getcharid(CHAR_ID_PARTY));
			
// 			// orcsdun01,32,172,0	warp	orc01-1	3,1,in_orcs01,30,180
// 			// orcsdun01,183,8,0	warp	orc03	4,2,orcsdun02,21,185
// 			// disablenpc instance_npcname("warp#orc01-1", .@instance);
// 			// disablenpc instance_npcname("warp", .@instance);
// 			disablenpc instance_npcname("orc01-1", .@instance);
// 			disablenpc instance_npcname("orc03", .@instance);
			
// 			monster(.instance_name$, 0, 0, getmonsterinfo(.orc_zombie_id, MOB_NAME), .orc_zombie_id, 700, "itest::On_itest_kill");
// 			monster(.instance_name$, 0, 0, getmonsterinfo(.orc_skeleton_id, MOB_NAME), .orc_skeleton_id, 300, "itest::On_itest_kill");
// 			monster(.instance_name$, 0, 0, getmonsterinfo(.drainliar_id, MOB_NAME), .drainliar_id, 100, "itest::On_itest_kill");
			
// 			close();
// 		}
// 		if(.@choice == 2)
// 		{
// 			close();
// 		}
// 	}
	
// 	end;
	
// 	On_itest_kill:
	
// 		.total_mobs -= 1;
// 		if(!.spawned_mvps)
// 		{
// 			if(.total_mobs < 201 && .total_mobs > 0)
// 			{
// 				.@mobs_left_until_mvp_spawn = .total_mobs - 50;
// 				announce(sprintf("%d %s remanining until MVP spawns", .@mobs_left_until_mvp_spawn, (.@mobs_left_until_mvp_spawn == 1 ? "monster" : "monsters")), bc_blue|bc_map);
// 			}
// 			if(.total_mobs < 51)
// 			{
// 				.spawned_mvps = 1;
// 				announce("3 MVPs have been spawned!", bc_blue|bc_map);
// 				monster("this",0, 0,"--ja--",-3,1, "itest::On_MVP_killed");
// 				monster("this",0, 0,"--ja--",-3,1,"itest::On_MVP_killed");
// 				monster("this",0, 0,"--ja--",-3,1,"itest::On_MVP_killed");
// 			}
// 		}
		
		
// 	end;
	
// 	On_MVP_killed:
// 		.mvps_killed += 1;
// 		if(.mvps_killed == 3)
// 		{
// 			announce("All MVPs have been killed!", bc_blue|bc_map);
// 			getpartymember(getcharid(CHAR_ID_PARTY), 0);
// 			copyarray(@names$[0], $@partymembername$[0], $@partymembercount);
			
// 			if($@partymembercount == 0)
// 			{
// 				@is_on_party = false;
// 			}
			
// 			else
// 			{
// 				@is_on_party = true;
// 				getpartymember(getcharid(CHAR_ID_PARTY), 1);
// 				copyarray(@char_ids[0], $@partymembercid[0], $@partymembercount);
// 				getpartymember(getcharid(CHAR_ID_PARTY), 2);
// 				copyarray(@account_ids[0], $@partymemberaid[0], $@partymembercount);
				
// 				@party_member_count = $@partymembercount;
// 				@killer_map$ = strcharinfo(PC_MAP);
// 			}
			
			
// 			if(@is_on_party)
// 			{
// 				for(.@i = 0; .@i < @party_member_count; .@i++)
// 				{
// 					if(isloggedin(@account_ids[.@i], @char_ids[.@i]))
// 					{
// 						@party_member_map$ = strcharinfo(PC_MAP, "a", @account_ids[.@i]);
// 						if(@killer_map$ == @party_member_map$)
// 						{
// 							.@died = getvariableofpc(player_died, @account_ids[.@i]);
// 							if(!.@died)
// 							{
// 								getitem(Temporal_Crystal, rand(1,3), @account_ids[.@i]);
// 							}
// 						}
// 					}
// 				}
// 			}
// 			else if(!player_died)
// 			{
// 				getitem(Temporal_Crystal, rand(1,3), @account_ids[.@i]);
// 			}
// 		}
	
// 	end;
// }